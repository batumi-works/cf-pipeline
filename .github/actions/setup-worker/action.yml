name: 'Setup Cloudflare Worker Environment'
description: 'Sets up Node.js, npm dependencies, and Wrangler CLI for Cloudflare Workers development'
author: 'Batumi Works'

inputs:
  node-version:
    description: 'Node.js version to use'
    required: false
    default: '18'
  wrangler-version:
    description: 'Wrangler version to use'
    required: false
    default: 'latest'
  cache-key:
    description: 'Cache key for dependencies'
    required: false
    default: ''
  install-dependencies:
    description: 'Whether to install npm dependencies'
    required: false
    default: 'true'
  setup-wrangler:
    description: 'Whether to setup Wrangler CLI'
    required: false
    default: 'true'

outputs:
  node-version:
    description: 'The Node.js version that was installed'
    value: ${{ steps.setup-node.outputs.node-version }}
  wrangler-version:
    description: 'The Wrangler version that was installed'
    value: ${{ steps.setup-wrangler.outputs.version }}
  cache-hit:
    description: 'Whether the cache was hit'
    value: ${{ steps.cache-deps.outputs.cache-hit }}

runs:
  using: 'composite'
  steps:
    - name: Setup Node.js
      id: setup-node
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'

    - name: Get npm cache directory
      id: npm-cache-dir
      shell: bash
      run: |
        echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT

    - name: Cache npm dependencies
      id: cache-deps
      uses: actions/cache@v4
      with:
        path: |
          ${{ steps.npm-cache-dir.outputs.dir }}
          node_modules
        key: ${{ inputs.cache-key || format('deps-{0}-{1}', inputs.node-version, hashFiles('package-lock.json')) }}
        restore-keys: |
          deps-${{ inputs.node-version }}-

    - name: Install dependencies
      if: ${{ inputs.install-dependencies == 'true' && steps.cache-deps.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        echo "üì¶ Installing npm dependencies..."
        npm ci --prefer-offline --no-audit
        echo "‚úÖ Dependencies installed"

    - name: Setup Wrangler CLI
      id: setup-wrangler
      if: ${{ inputs.setup-wrangler == 'true' }}
      shell: bash
      run: |
        echo "üîß Setting up Wrangler CLI..."
        
        if [ "${{ inputs.wrangler-version }}" = "latest" ]; then
          # Install latest version
          npm install -g wrangler
          WRANGLER_VERSION=$(wrangler --version)
        else
          # Install specific version
          npm install -g wrangler@${{ inputs.wrangler-version }}
          WRANGLER_VERSION=${{ inputs.wrangler-version }}
        fi
        
        echo "version=${WRANGLER_VERSION}" >> $GITHUB_OUTPUT
        echo "‚úÖ Wrangler CLI installed: ${WRANGLER_VERSION}"

    - name: Cache Wrangler builds
      uses: actions/cache@v4
      with:
        path: |
          .wrangler
          node_modules/.cache/wrangler
        key: wrangler-build-${{ hashFiles('wrangler.toml', 'src/**/*') }}
        restore-keys: |
          wrangler-build-

    - name: Validate environment
      shell: bash
      run: |
        echo "üîç Validating environment setup..."
        
        # Check Node.js
        NODE_VERSION=$(node --version)
        echo "Node.js version: ${NODE_VERSION}"
        
        # Check npm
        NPM_VERSION=$(npm --version)
        echo "npm version: ${NPM_VERSION}"
        
        # Check Wrangler (if installed)
        if command -v wrangler &> /dev/null; then
          WRANGLER_VERSION=$(wrangler --version)
          echo "Wrangler version: ${WRANGLER_VERSION}"
        else
          echo "Wrangler not installed globally, checking local..."
          if npx wrangler --version &> /dev/null; then
            WRANGLER_VERSION=$(npx wrangler --version)
            echo "Wrangler version (local): ${WRANGLER_VERSION}"
          else
            echo "‚ö†Ô∏è  Wrangler not found"
          fi
        fi
        
        # Check package.json
        if [ -f package.json ]; then
          echo "‚úÖ package.json found"
          echo "Project name: $(jq -r '.name' package.json)"
        else
          echo "‚ö†Ô∏è  package.json not found"
        fi
        
        # Check wrangler.toml
        if [ -f wrangler.toml ]; then
          echo "‚úÖ wrangler.toml found"
          echo "Worker name: $(grep -E '^name = ' wrangler.toml | cut -d'"' -f2 || echo 'not specified')"
        else
          echo "‚ö†Ô∏è  wrangler.toml not found"
        fi
        
        echo "‚úÖ Environment validation completed"

branding:
  icon: 'cloud'
  color: 'orange'